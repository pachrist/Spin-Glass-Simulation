#spin_glass.py
from __future__ import division
import numpy as np
import copy
import matplotlib.pylab as plt
from random import choice,random
from time import time
from math import exp

def random_spin(n): #returns a random configuration of n*n spins
	A = np.zeros((n,n))
	for i in range(n):
		for j in range(n):
			A[i,j] = choice([-1,1])
	return A

def Hamiltonian(v,n): #used for the initial array of each temperature
	S = 0
	for i in range(n):
		for j in range(n):
			S += v[i,j]*(v[(i+1)%n,j]+v[(i-1)%n,j]+v[i,(j+1)%n]+v[i,(j-1)%n])
	return -.5*S
	
def delta_U(v,i,j): #energy cost of flipping the spin, called by metropolis
	return 2*v[i,j]*(v[(i+1)%n,j]+v[(i-1)%n,j]+v[i,(j+1)%n]+v[i,(j-1)%n])
		
def metropolis(V,t,n,m): #V: spin values, t: Temp (J/k_b), n: n^2 spin sites, m: iterations
	samples = 1 #the 1 is either the random state or last state of previous t
	for i in range(m):
		x,y = np.random.randint(n,size=2)
		flip_cost = delta_U(V,x,y)
		if flip_cost < 0:
			V[x,y] *= -1
			if t > .2 or i > r: #equilibration is only used for first time
				H.append(H[-1]+flip_cost)
				M.append(np.sum(V)) #slow but M[-1]-2*V[x,y] wasn't working
				samples += 1
		elif random() < exp(-flip_cost/t): #P(move to lower energy) = boltzmann factor
			V[x,y] *= -1
			if t > .2 or i > r:
				H.append(H[-1]+flip_cost)
				M.append(np.sum(V))
				samples += 1
	return samples

n = 4 #n*n ising model
m = (n**2)*(10) #spins*(steps/spin)
r = 1000 # equilibration steps
Ts = 50 # number of temperatures
X = np.linspace(.2,5,Ts)
V = random_spin(n)
U,Cv,B = [],[],[]
tic = time()

for t in X:
	print "Simulating T =",t
	H = [Hamiltonian(V,n)]
	M = [np.sum(V)]
	s = metropolis(V,t,n,m)
	H = np.array(H)
	U.append(sum(H)/(s*n**2))
	Cv.append((sum(H**2)/s-(sum(H)/s)**2)/(t*n**2))
	B.append(abs(sum(M)/s)/(n**2))

print "Ising simulation of",n**2,"nodes at",Ts,"temperatures"
print "Steps per site:",m/(n**2)	
print time()-tic,"seconds elapsed"

fig = plt.figure(figsize=(18,6))
sp1 = fig.add_subplot(1,3,1)
X,U,Cv,B = list(X)[1:],U[1:],Cv[1:],B[1:] #first values are usually outliers

print "Estimated critical temperature:",X[Cv.index(max(Cv))]

sp1.plot(X,U)
axes = plt.gca()
axes.set_title("Energy per site vs. Temperature")
sp2 = fig.add_subplot(1,3,2)
sp2.plot(X,Cv)
axes = plt.gca()
axes.set_title("Specific heat per site vs. Temperature")
sp3 = fig.add_subplot(1,3,3)
sp3.plot(X,B)
axes = plt.gca()
axes.set_title("Magnetization per site vs. Temperature")
axes.set_ylim([0,1.5])
plt.show()
